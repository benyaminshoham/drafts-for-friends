<?php
/*
Plugin Name: Drafts for Friends
Plugin URI: http://automattic.com/
Description: Now you don't need to add friends as users to the blog in order to let them preview your drafts
Author: Gandalf the grey. (Neville Longbottom should stick to teaching herbology)
Version: 2.3
Author URI: https://en.wikipedia.org/wiki/Gandalf
*/

function add_plugin_scripts( $hook ) {
	// Load scripts only on the plugin page
	if( strpos( $hook, 'drafts-for-friends') !== false ) {
		wp_enqueue_style( 'dff-style', plugin_dir_url(__FILE__) . 'style.css' );
		wp_enqueue_script( 'dff-script', plugin_dir_url(__FILE__) . 'script.js', array ( 'jquery' ), 1.0);
	}
}

add_action( 'admin_enqueue_scripts', 'add_plugin_scripts' );

class DraftsForFriends	{

	// All shared posts for all users
	private $admin_options = [];
	// Shared posts for current user
	private $user_options = [];
	private $shared_post;

	function __construct(){
    	add_action( 'init', array( &$this, 'init' ) );
	}

	/**
	 * Init - get this show on the road.
	 * Hook actions and filters, load admin and user options.
	 */
	function init() {
		global $current_user;
		add_action( 'admin_menu', array( $this, 'add_admin_pages' ) );
		add_filter( 'the_posts', array( $this, 'the_posts_intercept' ) );
		add_filter( 'posts_results', array( $this, 'posts_results_intercept' ) );

		$saved_options = get_option('shared');
		if ( is_array( $saved_options ) ) {
			$this->admin_options = $saved_options;
		}

		if ( $current_user->id > 0 && isset( $this->admin_options[ $current_user->id ] ) ) {
			$this->user_options = $this->admin_options[$current_user->id];
		};
	}

	/**
	 * save_admin_options - Store shared posts list in admin options for the current user
	 */
	function save_admin_options(){
		global $current_user;
		if ($current_user->id > 0) {
			$this->admin_options[$current_user->id] = $this->user_options;
		}
		update_option('shared', $this->admin_options);
	}

	/**
	 * add_admin_pages - load plugin template into the relevant admin page.
	 */
	function add_admin_pages(){
		add_submenu_page(
			"edit.php",
			__('Drafts for Friends', 'draftsforfriends'),
			__('Drafts for Friends', 'draftsforfriends'),
			1,
			__FILE__,
			array( $this, 'get_admin_page_template' )
		);
	}

	/**
	 * Calculate expiration interval in seconds.
	 *
	 * @param $params - POST parameters of submitted form.
	 *
	 * @return int - number of seconds until share is expired.
	 */
	function get_expiration_in_seconds( $params ) {
		$expiration_units = 60;
		$unit_multiplier = 60;

		if ( isset( $params['expires'] ) ) {
			$expiration_units = intval( $params['expires'] );
		}

		// Convert time measure (second, minute etc') to it's seconds multiplier (1, 60, 3600 etc')
		$multipliers = array( 's' => 1, 'm' => 60, 'h' => 3600, 'd' => 24 * 3600 );
		if ( $params['measure'] && $multipliers[ $params['measure'] ] ) {
			$unit_multiplier = $multipliers[$params['measure']];
		}

		return $expiration_units * $unit_multiplier;
	}

	/**
	 * Process a "Share it" request.
	 * @param $params - POST parameters sent by "Share it" submit.
	 *
	 * @return string|void
	 */
	function process_share_it( $params ) {
		$result = __('Post shared.', 'draftsforfriends');
		if ( $params['post_id'] ) {
			$post = get_post( $params['post_id'] );
			if (!$post) {
				$result = __('There is no such post!', 'draftsforfriends');
			}
			if ( 'publish' == get_post_status( $post ) ) {
				$result = __('The post is published!', 'draftsforfriends');
			}
			$this->user_options['shared'][] = array(
				'id'      => $post->ID,
				'expires' => time() + $this->get_expiration_in_seconds( $params ),
				'key'     => 'baba_' . wp_generate_password( 8, false )
			);
			$this->save_admin_options();
		}
		return $result;
	}

	/**
	 * Delete a share from the list of shared posts.
	 * This function re-creates the shared posts array without the deleted share, and saves it.
	 *
	 * @param $params - POST parameters of delete request
	 *
	 * @return string|void - Success/Failure message for the user
	 */
	function process_delete( $params ) {
		if ( isset( $params['key'] ) && is_array( $this->user_options['shared'] ) ) {
			$shared = array();

			foreach ( $this->user_options['shared'] as $share ) {
				if ( $share['key'] != $params['key'] ) {
					$shared[] = $share;
				}
			}

			$this->user_options['shared'] = $shared;
			$this->save_admin_options();
			$result = __('Share deleted.', 'draftsforfriends');
		} else {
			$result = __('Failed deleting share.', 'draftsforfriends');
		}

		return $result;
	}

	/** Process the "extend" command.
	 * This function re-creates the shared posts array with the updated share, and saves it.
	 *
	 * @param $params - POST parameters of the request
	 *
	 * @return string|void - Message to the user
	 */
	function process_extend( $params ) {
		if ( isset( $params['key'] ) && is_array( $this->user_options['shared'] ) ) {
			$shared = array();
			foreach ( $this->user_options['shared'] as $share ) {
				if ( $share['key'] == $params['key'] ) {
					$share['expires'] += $this->get_expiration_in_seconds( $params );
				}
				$shared[] = $share;
			}
			$this->user_options['shared'] = $shared;
			$this->save_admin_options();
			$result = __('Share extended.', 'draftsforfriends');
		} else {
			$result = __('Failed extending share.', 'draftsforfriends');
		}

		return $result;
	}

	/**
	 * Get shareable - Gets posts for current user with status "draft", "future" and "pending"
	 * @return array - Shareable posts
	 */
	function get_shareable() {
		global $current_user;
		$drafts = $this->get_users_posts( $current_user->id, 'draft' );
		$scheduled = $this->get_users_posts( $current_user->id, 'future' );
		$pending = $this->get_users_posts( $current_user->id, 'pending' );

		$shareable = array(
			array(
				__('Your Drafts:', 'draftsforfriends'),
				count($drafts),
				$drafts,
			),
			array(
				__('Your Scheduled Posts:', 'draftsforfriends'),
				count($scheduled),
				$scheduled,
			),
			array(
				__('Pending Review:', 'draftsforfriends'),
				count($pending),
				$pending,
			),
		);
		return $shareable;
	}

	/**
	 * Get users posts by status. Displayed in the sharing form.
	 *
	 * @param $user_id
	 *
	 * @param $status
	 *
	 * @return array - posts
	 */
	function get_users_posts( $user_id, $status ) {
		return get_posts([
			'author' => $user_id,
			'post_status' => $status,
			'post_type' => 'post'
		]);
	}

	/**
	 * get_expiration_class checks for expired shares, and return the correct style class:
	 * 'expired' for expired shares
	 * 'valid' for shares that did not yet expire
	 *
	 * @param $expires
	 *
	 * @return string
	 */
	function get_expiration_class( $expires ) {
		$expires_date = new DateTime();
		$expires_date->setTimestamp( $expires );
		$now_date = new DateTime();
		if ( $now_date > $expires_date ) {
			$class_name = 'expired';
		} else {
			$class_name = 'valid';
		}
		return $class_name;
	}

	/**
	 * get_expiration converts the expiration timestamp to a human-readable format
	 * e.g. "5 hours and 3 minutes"
	 *
	 * @param $expires
	 *
	 * @return string
	 */
	function get_expiration( $expires ) {
		$expires_date = new DateTime();
		$expires_date->setTimestamp( $expires );
		$now_date = new DateTime();
		if ( $now_date > $expires_date ) {
			$reasonable_interval = 'Expired';
		} else {
			$expires_interval = $expires_date->diff( $now_date );
			$reasonable_interval = $this->format_reasonable_interval( $expires_interval, 2, ', ' );
		}
		return $reasonable_interval;
	}

	/**
	 * Format an interval to display a human-readable, reasonable Date and Time.
	 * If the interval does not have a time component (years, months, etc) that component won't be displayed.
	 *
	 * Inspiration: https://gist.github.com/xadim/8cf3569ee14ec943c324
	 *
	 * @param DateInterval $interval The interval
	 *
	 * @param int $max_parts - number of interval parts to return
	 *
	 * @param string $delimiter - added after each part, except the last one
	 *
	 * @return string - Formatted interval string.
	 */
	function format_reasonable_interval( DateInterval $interval, $max_parts = 2, $delimiter = ' ' ) {
		$result       = "";
		$parts        = 0;
		$interval_map = [
			'year'   => [ 'interval' => $interval->y, 'format' => '%y year' ],
			'month'  => [ 'interval' => $interval->m, 'format' => '%m month' ],
			'day'    => [ 'interval' => $interval->d, 'format' => '%d day' ],
			'hour'   => [ 'interval' => $interval->h, 'format' => '%h hour' ],
			'minute' => [ 'interval' => $interval->i, 'format' => '%i minute' ],
			'second' => [ 'interval' => $interval->s, 'format' => '%s second' ],
		];

		foreach ( $interval_map as $interval_part ) {
			if ( $interval_part['interval'] && $parts < $max_parts ) {

				// Format interval part using map.
				$result .= $interval->format( $interval_part['format'] );

				// Add plural suffix if interval part is larger than 1
				// e.g. 1 hour, 3 hours
				if ( $interval_part['interval'] > 1 ) {
					$result .= 's';
				}

				// Add delimiter after all parts except the last one.
				if ( $parts < $max_parts - 1 ) {
					$result .= $delimiter;
				}
				$parts ++;
			}
		}
		// TODO: If there are less parts than the max, remove last delimiter
		return $result;
	}

	/**
	 * is_shared - checks if a post URI has a valid share key in it's query string
	 * @param $post_id
	 *
	 * @return bool
	 */
	function is_shared( $post_id ) {
		foreach ( $this->admin_options as $option ) {
			$shares = $option['shared'];
			foreach ( $shares as $share ) {
				if ( $share['key'] == $_GET['draftsforfriends'] && $post_id ) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * posts_results_intercept - Add shared drafts to post results with this hook
	 * so users can see this post without signing in.
	 * @param $posts - Posts in posts_results
	 *
	 * @return mixed - Same posts are returned, only $this->shared_post is updated.
	 */
	function posts_results_intercept($posts) {
		if ( 1 == count( $posts ) ) {
			$post = $posts[0];
			$status = get_post_status($post);
			if ( 'publish' != $status && $this->is_shared( $post->ID ) ) {
				$this->shared_post = $post;
			}
		}
		return $posts;
	}

	/**
	 * the_posts_intercept - show shared post if one exist with this hook for the_posts
	 * @param $posts - returned by the_posts query
	 *
	 * @return array - posts to show
	 */
	function the_posts_intercept( $posts ) {
		$result = $posts;
		if ( empty( $posts ) && ! is_null( $this->shared_post ) ) {
			$result = array( $this->shared_post );
		} else {
			$this->shared_post = null;
		}
		return $result;
	}

	/**
	 * get_measure_select_template - build a select element for time measures (hours, minutes...)
	 * and return it to the markup.
	 * @return string - measure select template
	 */
	function get_measure_select_template() {
		$secs = __('seconds', 'draftsforfriends');
		$mins = __('minutes', 'draftsforfriends');
		$hours = __('hours', 'draftsforfriends');
		$days = __('days', 'draftsforfriends');
		return <<<SELECT
			<input name="expires" type="text" value="2" size="4"/>
			<select name="measure">
				<option value="s">$secs</option>
				<option value="m">$mins</option>
				<option value="h" selected="selected">$hours</option>
				<option value="d">$days</option>
			</select>
SELECT;
	}

	/**
	 * get_admin_page_template - builds and returns the main admin page template.
	 */
	function get_admin_page_template() {
		$message = '';
		if ( $_POST['draftsforfriends_submit'] ) {
			$message = $this->process_share_it( $_POST );
		} elseif ( $_POST['action'] == 'extend' ) {
			$message = $this->process_extend( $_POST );
		} elseif ( $_GET['action'] == 'delete' ) {
			$message = $this->process_delete( $_GET );
		}
		$drafts = $this->get_shareable(); ?>
		<div class="wrap">
			<h2><?php _e('Drafts for Friends', 'draftsforfriends'); ?></h2>
			<?php if ( $message ) : ?>
				<div id="message" class="updated fade"><?php echo $message; ?></div>
			<?php endif; ?>
			<h3><?php _e('Currently shared drafts', 'draftsforfriends'); ?></h3>

			<table class="widefat">
				<thead>
					<tr>
						<th><?php _e( 'ID', 'draftsforfriends' ); ?></th>
						<th><?php _e( 'Title', 'draftsforfriends' ); ?></th>
						<th><?php _e( 'Link', 'draftsforfriends' ); ?></th>
						<th colspan="2" class="actions"><?php _e( 'Actions', 'draftsforfriends' ); ?></th>
						<th><?php _e( 'Expires in', 'draftsforfriends' ); ?></th>
					</tr>
				</thead>
				<tbody>
					<?php
					$shared_posts = $this->user_options['shared'];
					if( is_array( $shared_posts ) || $shared_posts instanceof \Traversable ):
					foreach ( $shared_posts as $share ):
						$post = get_post( $share['id'] );
						$url = get_bloginfo('url') . '/?p=' . $post->ID . '&draftsforfriends=' . $share['key'];
					?>
						<tr class="<?php echo $this->get_expiration_class($share['expires']); ?>">
							<td><?php echo $post->ID; ?></td>
							<td><?php echo $post->post_title; ?></td>
							<!-- TODO: make the draft link selecatble -->
							<td><a href="<?php echo $url; ?>"><?php echo esc_html( $url ); ?></a></td>
							<td class="actions">
								<a class="draftsforfriends-extend edit" id="draftsforfriends-extend-link-<?php echo $share['key']; ?>"
									href="javascript:draftsforfriends.toggle_extend('<?php echo $share['key']; ?>');">
										<?php _e( 'Extend', 'draftsforfriends' ); ?>
								</a>
								<form class="draftsforfriends-extend" id="draftsforfriends-extend-form-<?php echo esc_html($share['key']); ?>"
									action="" method="post">
									<input type="hidden" name="action" value="extend" />
									<input type="hidden" name="key" value="<?php echo $share['key']; ?>" />
									<input type="submit" class="button" name="draftsforfriends_extend_submit"
										value="<?php _e('Extend', 'draftsforfriends'); ?>"/>
										<?php _e( 'by', 'draftsforfriends' );?>
										<?php echo $this->get_measure_select_template(); ?>
									<a class="draftsforfriends-extend-cancel"
										href="javascript:draftsforfriends.cancel_extend('<?php echo $share['key']; ?>');">
										<?php _e('Cancel', 'draftsforfriends'); ?>
									</a>
								</form>
							</td>
							<td class="actions">
								<a class="delete" href="edit.php?page=<?php echo plugin_basename(__FILE__); ?>&amp;action=delete&amp;key=<?php echo $share['key']; ?>"><?php _e('Delete', 'draftsforfriends'); ?></a>
							</td>
							<td><?php echo $this->get_expiration($share['expires']); ?></td>
						</tr>
					<?php endforeach;
					else: ?>
						<tr>
							<td colspan="5"><?php _e('No shared drafts!', 'draftsforfriends'); ?></td>
						</tr>
					<?php endif; ?>
				</tbody>
			</table>

			<h3><?php _e('Drafts for Friends', 'draftsforfriends'); ?></h3>
			<form id="draftsforfriends-share" action="" method="post">
				<p>
					<select id="draftsforfriends-postid" name="post_id">
						<option value=""><?php _e('Choose a draft', 'draftsforfriends'); ?></option>
						<?php foreach ( $drafts as $draft ) :
							if ( $draft[ 1 ] ) : ?>
								<option value="" disabled="disabled"></option>
								<option value="" disabled="disabled"><?php echo $draft[0]; ?></option>
								<?php foreach ( $draft[2] as $draft_post ) :
									if ( empty( $draft_post->post_title ) ) continue; ?>
										<option value="<?php echo $draft_post->ID ?>">
											<?php echo esc_html( $draft_post->post_title ); ?>
										</option>
								<?php endforeach;
							endif;
						endforeach; ?>
					</select>
				</p>
				<p>
					<input type="submit" class="button" name="draftsforfriends_submit"
						value="<?php _e('Share it', 'draftsforfriends'); ?>" />
					<?php _e('for', 'draftsforfriends'); ?>
					<?php echo $this->get_measure_select_template(); ?>.
				</p>
			</form>
		</div>
<?php
	}
}

new draftsforfriends();
