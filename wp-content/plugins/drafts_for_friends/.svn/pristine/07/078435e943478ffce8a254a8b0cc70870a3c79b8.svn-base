<?php
/*
Plugin Name: Drafts for Friends
Plugin URI: http://automattic.com/
Description: Now you don't need to add friends as users to the blog in order to let them preview your drafts
Author: Neville Longbottom
Version: 2.2
Author URI:
*/ 

class DraftsForFriends	{

	private $admin_options;
	private $user_options;
	private $shared_post;

	function __construct(){
    	add_action( 'init', array( &$this, 'init' ) );
	}

	function init() {
		global $current_user;
		add_action( 'admin_menu', array( $this, 'add_admin_pages' ) );
		add_filter( 'the_posts', array( $this, 'the_posts_intercept' ) );
		add_filter( 'posts_results', array( $this, 'posts_results_intercept' ) );

		$this->admin_options = $this->get_admin_options();
		$this->user_options = ($current_user->id > 0 && isset($this->admin_options[$current_user->id]))? $this->admin_options[$current_user->id] : array();
		$this->save_admin_options();
		$this->admin_page_init();
	}

	function admin_page_init() {
		wp_enqueue_script('jquery');
		add_action('admin_head', array($this, 'print_admin_css'));
		add_action('admin_head', array($this, 'print_admin_js'));
	}

	function get_admin_options() {
		$saved_options = get_option('shared');
		return is_array($saved_options)? $saved_options : array();
	}

	function save_admin_options(){
		global $current_user;
		if ($current_user->id > 0) {
			$this->admin_options[$current_user->id] = $this->user_options;
		}
		update_option('shared', $this->admin_options);
	}

	function add_admin_pages(){
		add_submenu_page("edit.php", __('Drafts for Friends', 'draftsforfriends'), __('Drafts for Friends', 'draftsforfriends'),
			1, __FILE__, array($this, 'output_existing_menu_sub_admin_page'));
	}

	/**
	 * Calculate expiration interval in seconds.
	 *
	 * @param $params - POST parameters of submitted form.
	 *
	 * @return int - number of seconds until share is expired.
	 */
	function get_expiration_in_seconds( $params ) {
		$expiration_units = 60;
		$unit_multiplier = 60;

		if ( isset( $params['expires'] ) ) {
			$expiration_units = intval( $params['expires'] );
		}

		// Convert time measure (second, minute etc') to it's seconds multiplier (1, 60, 3600 etc')
		$multipliers = array( 's' => 1, 'm' => 60, 'h' => 3600, 'd' => 24 * 3600 );
		if ( $params['measure'] && $multipliers[ $params['measure'] ] ) {
			$unit_multiplier = $multipliers[$params['measure']];
		}

		return $expiration_units * $unit_multiplier;
	}

	/**
	 * Process a "Share it" request.
	 * @param $params - POST parameters sent by "Share it" submit.
	 *
	 * @return string|void
	 */
	function process_share_it( $params ) {
		$result = __('Post shared.', 'draftsforfriends');
		if ( $params['post_id'] ) {
			$post = get_post( $params['post_id'] );
			if (!$post) {
				$result = __('There is no such post!', 'draftsforfriends');
			}
			if ( 'publish' == get_post_status( $post ) ) {
				$result = __('The post is published!', 'draftsforfriends');
			}
			$this->user_options['shared'][] = array(
				'id'      => $post->ID,
				'expires' => time() + $this->get_expiration_in_seconds( $params ),
				'key'     => 'baba_' . esc_html( wp_generate_password( 8 ) )
			);
			$this->save_admin_options();
		}
		return $result;
	}

	/**
	 * Delete a share from the list of shared posts.
	 * This function re-creates the shared posts array without the deleted share, and saves it.
	 *
	 * @param $params - POST parameters of delete request
	 *
	 * @return string|void - Success/Failure message for the user
	 */
	function process_delete( $params ) {
		if( isset( $params['key'] ) ) {
			$shared = array();

			foreach( $this->user_options['shared'] as $share ) {
				if ( $share['key'] != $params['key'] ) {
					$shared[] = $share;
				}
			}

			$this->user_options['shared'] = $shared;
			$this->save_admin_options();
			$result = __('Share deleted.', 'draftsforfriends');
		} else {
			$result = __('Failed deleting share.', 'draftsforfriends');
		}

		return $result;
	}

	/** Process the "extend" command.
	 * This function re-creates the shared posts array with the updated share, and saves it.
	 *
	 * @param $params - POST parameters of the request
	 *
	 * @return string|void - Message to the user
	 */
	function process_extend( $params ) {
		if( isset( $params['key'] ) ) {
			$shared = array();
			foreach( $this->user_options['shared'] as $share ) {
				if ( $share['key'] == $params['key'] ) {
					$share['expires'] += $this->get_expiration_in_seconds( $params );
				}
				$shared[] = $share;
			}
			$this->user_options['shared'] = $shared;
			$this->save_admin_options();
			$result = __('Share extended.', 'draftsforfriends');
		} else {
			$result = __('Failed extending share.', 'draftsforfriends');
		}

		return $result;
	}

	/**
	 * Get drafts - Gets posts for current user with status "draft"
	 * @return array - Drafts
	 */
	function get_drafts() {
		global $current_user;
		$my_drafts = get_users_drafts( $current_user->id );
		$my_scheduled = $this->get_users_future( $current_user->id );

		// $pending = get_others_pending($current_user->id); DEPRECATED.
		$pending_filter = [
			'author' => $current_user->id,
			'post_status' => 'draft'
		];
		$pending = get_posts( $pending_filter );

		$drafts = array(
			array(
				__('Your Drafts:', 'draftsforfriends'),
				count($my_drafts),
				$my_drafts,
			),
			array(
				__('Your Scheduled Posts:', 'draftsforfriends'),
				count($my_scheduled),
				$my_scheduled,
			),
			array(
				__('Pending Review:', 'draftsforfriends'),
				count($pending),
				$pending,
			),
		);
		return $drafts;
	}

	// TODO: Change to get_posts
	function get_users_future( $user_id ) {
		global $wpdb;
		return $wpdb->get_results("SELECT ID, post_title FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'future' AND post_author = $user_id ORDER BY post_modified DESC");
	}

	function get_shared() {
		return $this->user_options['shared'];
	}

	/**
	 * get_expiration converts the expiration timestamp to a human-readable format
	 * e.g. "5 hours and 3 minutes"
	 *
	 * @param $expires
	 *
	 * @return string
	 */
	function get_expiration( $expires ) {
		$expires_date = new DateTime();
		$expires_date->setTimestamp( $expires );
		$now_date = new DateTime();
		if( $now_date > $expires_date ) {
			$readable_interval = 'Expired';
		} else {
			$expires_interval = $expires_date->diff( $now_date );
			$readable_interval = $this->format_interval( $expires_interval );
		}
		return $readable_interval;
	}

	/**
	 * Format an interval to show all existing components. Human Readable Time
	 * If the interval doesn't have a time component (years, months, etc)
	 * That component won't be displayed.
	 * source: https://gist.github.com/xadim/8cf3569ee14ec943c324
	 *
	 * @param DateInterval $interval The interval
	 *
	 * @return string Formatted interval string.
	 */
	function format_interval(DateInterval $interval) {
		$result = "";
		if ($interval->y) { $result .= $interval->format("%y years "); }
		if ($interval->m) { $result .= $interval->format("%m months "); }
		if ($interval->d) { $result .= $interval->format("%d days "); }
		if ($interval->h) { $result .= $interval->format("%h hours "); }
		if ($interval->i) { $result .= $interval->format("%i minutes "); }
		if ($interval->s) { $result .= $interval->format("%s seconds "); }

		return $result;
	}

	function output_existing_menu_sub_admin_page() {
		$message = '';
		if ( $_POST['draftsforfriends_submit'] ) {
			$message = $this->process_share_it( $_POST );
		} elseif ( $_POST['action'] == 'extend' ) {
			$message = $this->process_extend( $_POST );
		} elseif ( $_GET['action'] == 'delete' ) {
			$message = $this->process_delete( $_GET );
		}
		$drafts = $this->get_drafts();
?>
	<div class="wrap">
		<h2><?php _e('Drafts for Friends', 'draftsforfriends'); ?></h2>
<?php 	if ($message):?>
		<div id="message" class="updated fade"><?php echo $message; ?></div>
<?php 	endif;?>
		<h3><?php _e('Currently shared drafts', 'draftsforfriends'); ?></h3>
		<table class="widefat">
			<thead>
			<tr>
				<th><?php _e( 'ID', 'draftsforfriends' ); ?></th>
				<th><?php _e( 'Title', 'draftsforfriends' ); ?></th>
				<th><?php _e( 'Link', 'draftsforfriends' ); ?></th>
				<th colspan="2" class="actions"><?php _e( 'Actions', 'draftsforfriends' ); ?></th>
				<th><?php _e( 'Expires in', 'draftsforfriends' ); ?></th>
			</tr>
			</thead>
			<tbody>
<?php
		$shared_posts = $this->get_shared();
		foreach( $shared_posts as $share ):
			$post = get_post( $share['id'] );
			$url = get_bloginfo('url') . '/?p=' . $post->ID . '&draftsforfriends=' . esc_html($share['key']);
?>
			<tr>
				<td><?php echo $post->ID; ?></td>
				<td><?php echo $post->post_title; ?></td>
				<!-- TODO: make the draft link selecatble -->
				<td><a href="<?php echo $url; ?>"><?php echo esc_html( $url ); ?></a></td>
				<td class="actions">
					<a class="draftsforfriends-extend edit" id="draftsforfriends-extend-link-<?php echo $share['key']; ?>"
						href="javascript:draftsforfriends.toggle_extend('<?php echo esc_html($share['key']); ?>');">
							<?php _e( 'Extend', 'draftsforfriends' ); ?>
					</a>
					<form class="draftsforfriends-extend" id="draftsforfriends-extend-form-<?php echo esc_html($share['key']); ?>"
						action="" method="post">	
						<input type="hidden" name="action" value="extend" />
						<input type="hidden" name="key" value="<?php echo esc_html($share['key']); ?>" />
						<input type="submit" class="button" name="draftsforfriends_extend_submit"
							value="<?php _e('Extend', 'draftsforfriends'); ?>"/>
							<?php _e( 'by', 'draftsforfriends' );?>
							<?php echo $this->tmpl_measure_select(); ?>
						<a class="draftsforfriends-extend-cancel"
							href="javascript:draftsforfriends.cancel_extend('<?php echo esc_html($share['key']); ?>');">
							<?php _e('Cancel', 'draftsforfriends'); ?>
						</a>
					</form>
				</td>
				<td class="actions">
					<a class="delete" href="edit.php?page=<?php echo plugin_basename(__FILE__); ?>&amp;action=delete&amp;key=<?php echo esc_html($share['key']); ?>"><?php _e('Delete', 'draftsforfriends'); ?></a>
				</td>
				<td><?php echo $this->get_expiration($share['expires']); ?></td>
			</tr>
<?php
		endforeach;
		if (empty($shared_posts)):
?>
			<tr>
				<td colspan="5"><?php _e('No shared drafts!', 'draftsforfriends'); ?></td>
			</tr>
<?php
		endif;
?>
			</tbody>
		</table>
		<h3><?php _e('Drafts for Friends', 'draftsforfriends'); ?></h3>
		<?php var_dump( $drafts ); ?>
		<form id="draftsforfriends-share" action="" method="post">
		<p>
			<select id="draftsforfriends-postid" name="post_id">
			<option value=""><?php _e('Choose a draft', 'draftsforfriends'); ?></option>
<?php
		foreach($drafts as $draft):
			if ($draft[1]):
?>
			<option value="" disabled="disabled"></option>
			<option value="" disabled="disabled"><?php echo $draft[0]; ?></option>
<?php
				foreach($draft[2] as $draft_post):
					if (empty($draft_post->post_title)) continue;
?>
			<option value="<?php echo $draft_post->ID?>"><?php echo wp_specialchars($draft_post->post_title); ?></option>
<?php
				endforeach;
			endif;
		endforeach;
?>
			</select>
		</p>
		<p>
			<input type="submit" class="button" name="draftsforfriends_submit"
				value="<?php _e('Share it', 'draftsforfriends'); ?>" />
			<?php _e('for', 'draftsforfriends'); ?>
			<?php echo $this->tmpl_measure_select(); ?>.
		</p>
		</form>
		</div>
<?php
	}

	function can_view( $pid ) {
		foreach( $this->admin_options as $option ) {
			$shares = $option['shared'];
			foreach( $shares as $share ) {
				if( $share['key'] == $_GET['draftsforfriends'] && $pid ) {
					return true;
				}
			}
		}
		return false;
	}

	function posts_results_intercept($posts) {
		if ( 1 != count( $posts ) ) {
			return $posts;
		}
		$post = $posts[0];
		$status = get_post_status($post);
		if ( 'publish' != $status && $this->can_view( $post->ID ) ) {
			$this->shared_post = $post;
		}
		return $posts;
	}

	function the_posts_intercept( $posts ) {
		$result = $posts;
		if ( empty( $posts ) && ! is_null( $this->shared_post ) ) {
			$result = array( $this->shared_post );
		} else {
			$this->shared_post = null;
		}
		return $result;
	}

	function tmpl_measure_select() {
		$secs = __('seconds', 'draftsforfriends');
		$mins = __('minutes', 'draftsforfriends');
		$hours = __('hours', 'draftsforfriends');
		$days = __('days', 'draftsforfriends');
		return <<<SELECT
			<input name="expires" type="text" value="2" size="4"/>
			<select name="measure">
				<option value="s">$secs</option>
				<option value="m">$mins</option>
				<option value="h" selected="selected">$hours</option>
				<option value="d">$days</option>
			</select>
SELECT;
	}

	function print_admin_css() {
?>
	<style type="text/css">
		a.draftsforfriends-extend, a.draftsforfriends-extend-cancel { display: none; }
		form.draftsforfriends-extend { white-space: nowrap; }
		form.draftsforfriends-extend, form.draftsforfriends-extend input, form.draftsforfriends-extend select { font-size: 11px; }
		th.actions, td.actions { text-align: center; }
	</style>
<?php
	}

	function print_admin_js() {
?>
	<script type="text/javascript">
	jQuery(function() {
		var cancelButton = jQuery('a.draftsforfriends-extend-cancel');
		jQuery('form.draftsforfriends-extend').hide();
		jQuery('a.draftsforfriends-extend').show();
		cancelButton.show();
		cancelButton.css('display', 'inline');
	});
	window.draftsforfriends = {
		toggle_extend: function(key) {
			jQuery('#draftsforfriends-extend-form-'+key).show();
			jQuery('#draftsforfriends-extend-link-'+key).hide();
			jQuery('#draftsforfriends-extend-form-'+key+' input[name="expires"]').focus();
		},
		cancel_extend: function(key) {
			jQuery('#draftsforfriends-extend-form-'+key).hide();
			jQuery('#draftsforfriends-extend-link-'+key).show();
		}
	};
	</script>
<?php
	}
}

new draftsforfriends();
